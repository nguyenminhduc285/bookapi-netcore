/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


namespace org.openstars.core.bigset.Generic
{

  public partial class TStringBigSetInfo : TBase
  {
    private long _count;

    public string BigsetName { get; set; }

    public long BigsetID { get; set; }

    public long Count
    {
      get
      {
        return _count;
      }
      set
      {
        __isset.count = true;
        this._count = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool count;
    }

    public TStringBigSetInfo()
    {
    }

    public TStringBigSetInfo(string bigsetName, long bigsetID) : this()
    {
      this.BigsetName = bigsetName;
      this.BigsetID = bigsetID;
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_bigsetName = false;
        bool isset_bigsetID = false;
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                BigsetName = await iprot.ReadStringAsync(cancellationToken);
                isset_bigsetName = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I64)
              {
                BigsetID = await iprot.ReadI64Async(cancellationToken);
                isset_bigsetID = true;
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I64)
              {
                Count = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
        if (!isset_bigsetName)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
        if (!isset_bigsetID)
        {
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        }
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("TStringBigSetInfo");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        field.Name = "bigsetName";
        field.Type = TType.String;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(BigsetName, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        field.Name = "bigsetID";
        field.Type = TType.I64;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(BigsetID, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
        if (__isset.count)
        {
          field.Name = "count";
          field.Type = TType.I64;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI64Async(Count, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as TStringBigSetInfo;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return System.Object.Equals(BigsetName, other.BigsetName)
        && System.Object.Equals(BigsetID, other.BigsetID)
        && ((__isset.count == other.__isset.count) && ((!__isset.count) || (System.Object.Equals(Count, other.Count))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        hashcode = (hashcode * 397) + BigsetName.GetHashCode();
        hashcode = (hashcode * 397) + BigsetID.GetHashCode();
        if(__isset.count)
          hashcode = (hashcode * 397) + Count.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("TStringBigSetInfo(");
      sb.Append(", BigsetName: ");
      sb.Append(BigsetName);
      sb.Append(", BigsetID: ");
      sb.Append(BigsetID);
      if (__isset.count)
      {
        sb.Append(", Count: ");
        sb.Append(Count);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
