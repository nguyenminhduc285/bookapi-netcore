/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


namespace org.openstars.core.bigset.Generic
{

  public partial class TBigSetGenericData : TBase
  {
    private long _parentID;
    private short _level;
    private List<TMetaItem> _children;
    private TSmallSet _smallset;
    private TNeedSplitInfo _splitinfo;

    public long ParentID
    {
      get
      {
        return _parentID;
      }
      set
      {
        __isset.parentID = true;
        this._parentID = value;
      }
    }

    public short Level
    {
      get
      {
        return _level;
      }
      set
      {
        __isset.level = true;
        this._level = value;
      }
    }

    public List<TMetaItem> Children
    {
      get
      {
        return _children;
      }
      set
      {
        __isset.children = true;
        this._children = value;
      }
    }

    public TSmallSet Smallset
    {
      get
      {
        return _smallset;
      }
      set
      {
        __isset.smallset = true;
        this._smallset = value;
      }
    }

    public TNeedSplitInfo Splitinfo
    {
      get
      {
        return _splitinfo;
      }
      set
      {
        __isset.splitinfo = true;
        this._splitinfo = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool parentID;
      public bool level;
      public bool children;
      public bool smallset;
      public bool splitinfo;
    }

    public TBigSetGenericData()
    {
      this._parentID = 0;
      this.__isset.parentID = true;
      this._level = 0;
      this.__isset.level = true;
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64)
              {
                ParentID = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I16)
              {
                Level = await iprot.ReadI16Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.List)
              {
                {
                  TList _list8 = await iprot.ReadListBeginAsync(cancellationToken);
                  Children = new List<TMetaItem>(_list8.Count);
                  for(int _i9 = 0; _i9 < _list8.Count; ++_i9)
                  {
                    TMetaItem _elem10;
                    _elem10 = new TMetaItem();
                    await _elem10.ReadAsync(iprot, cancellationToken);
                    Children.Add(_elem10);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Struct)
              {
                Smallset = new TSmallSet();
                await Smallset.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.Struct)
              {
                Splitinfo = new TNeedSplitInfo();
                await Splitinfo.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("TBigSetGenericData");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (__isset.parentID)
        {
          field.Name = "parentID";
          field.Type = TType.I64;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI64Async(ParentID, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.level)
        {
          field.Name = "level";
          field.Type = TType.I16;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI16Async(Level, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Children != null && __isset.children)
        {
          field.Name = "children";
          field.Type = TType.List;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, Children.Count), cancellationToken);
            foreach (TMetaItem _iter11 in Children)
            {
              await _iter11.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Smallset != null && __isset.smallset)
        {
          field.Name = "smallset";
          field.Type = TType.Struct;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await Smallset.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Splitinfo != null && __isset.splitinfo)
        {
          field.Name = "splitinfo";
          field.Type = TType.Struct;
          field.ID = 5;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await Splitinfo.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as TBigSetGenericData;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.parentID == other.__isset.parentID) && ((!__isset.parentID) || (System.Object.Equals(ParentID, other.ParentID))))
        && ((__isset.level == other.__isset.level) && ((!__isset.level) || (System.Object.Equals(Level, other.Level))))
        && ((__isset.children == other.__isset.children) && ((!__isset.children) || (TCollections.Equals(Children, other.Children))))
        && ((__isset.smallset == other.__isset.smallset) && ((!__isset.smallset) || (System.Object.Equals(Smallset, other.Smallset))))
        && ((__isset.splitinfo == other.__isset.splitinfo) && ((!__isset.splitinfo) || (System.Object.Equals(Splitinfo, other.Splitinfo))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.parentID)
          hashcode = (hashcode * 397) + ParentID.GetHashCode();
        if(__isset.level)
          hashcode = (hashcode * 397) + Level.GetHashCode();
        if(__isset.children)
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Children);
        if(__isset.smallset)
          hashcode = (hashcode * 397) + Smallset.GetHashCode();
        if(__isset.splitinfo)
          hashcode = (hashcode * 397) + Splitinfo.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("TBigSetGenericData(");
      bool __first = true;
      if (__isset.parentID)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("ParentID: ");
        sb.Append(ParentID);
      }
      if (__isset.level)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Level: ");
        sb.Append(Level);
      }
      if (Children != null && __isset.children)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Children: ");
        sb.Append(Children);
      }
      if (Smallset != null && __isset.smallset)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Smallset: ");
        sb.Append(Smallset== null ? "<null>" : Smallset.ToString());
      }
      if (Splitinfo != null && __isset.splitinfo)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Splitinfo: ");
        sb.Append(Splitinfo== null ? "<null>" : Splitinfo.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
