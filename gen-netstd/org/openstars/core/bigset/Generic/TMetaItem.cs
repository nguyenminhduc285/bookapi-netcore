/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


namespace org.openstars.core.bigset.Generic
{

  public partial class TMetaItem : TBase
  {
    private byte[] _minItem;
    private long _metaID;
    private int _count;

    public byte[] MinItem
    {
      get
      {
        return _minItem;
      }
      set
      {
        __isset.minItem = true;
        this._minItem = value;
      }
    }

    public long MetaID
    {
      get
      {
        return _metaID;
      }
      set
      {
        __isset.metaID = true;
        this._metaID = value;
      }
    }

    public int Count
    {
      get
      {
        return _count;
      }
      set
      {
        __isset.count = true;
        this._count = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool minItem;
      public bool metaID;
      public bool count;
    }

    public TMetaItem()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                MinItem = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I64)
              {
                MetaID = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I32)
              {
                Count = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("TMetaItem");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (MinItem != null && __isset.minItem)
        {
          field.Name = "minItem";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(MinItem, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.metaID)
        {
          field.Name = "metaID";
          field.Type = TType.I64;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI64Async(MetaID, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.count)
        {
          field.Name = "count";
          field.Type = TType.I32;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(Count, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as TMetaItem;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.minItem == other.__isset.minItem) && ((!__isset.minItem) || (System.Object.Equals(MinItem, other.MinItem))))
        && ((__isset.metaID == other.__isset.metaID) && ((!__isset.metaID) || (System.Object.Equals(MetaID, other.MetaID))))
        && ((__isset.count == other.__isset.count) && ((!__isset.count) || (System.Object.Equals(Count, other.Count))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.minItem)
          hashcode = (hashcode * 397) + MinItem.GetHashCode();
        if(__isset.metaID)
          hashcode = (hashcode * 397) + MetaID.GetHashCode();
        if(__isset.count)
          hashcode = (hashcode * 397) + Count.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("TMetaItem(");
      bool __first = true;
      if (MinItem != null && __isset.minItem)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("MinItem: ");
        sb.Append(MinItem);
      }
      if (__isset.metaID)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("MetaID: ");
        sb.Append(MetaID);
      }
      if (__isset.count)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Count: ");
        sb.Append(Count);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
