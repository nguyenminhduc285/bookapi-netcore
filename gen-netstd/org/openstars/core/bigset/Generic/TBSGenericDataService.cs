/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


namespace org.openstars.core.bigset.Generic
{
  public partial class TBSGenericDataService
  {
    public interface IAsync
    {
      Task<TPutItemResult> bsgPutItemAsync(long rootID, TItem item, CancellationToken cancellationToken = default(CancellationToken));

      Task<bool> bsgRemoveItemAsync(long key, byte[] itemKey, CancellationToken cancellationToken = default(CancellationToken));

      Task<TExistedResult> bsgExistedAsync(long rootID, byte[] itemKey, CancellationToken cancellationToken = default(CancellationToken));

      Task<TItemResult> bsgGetItemAsync(long rootID, byte[] itemKey, CancellationToken cancellationToken = default(CancellationToken));

      Task<TItemSetResult> bsgGetSliceAsync(long rootID, int fromIdx, int count, CancellationToken cancellationToken = default(CancellationToken));

      Task<TItemSetResult> bsgGetSliceFromItemAsync(long rootID, byte[] fromKey, int count, CancellationToken cancellationToken = default(CancellationToken));

      Task<TItemSetResult> bsgGetSliceRAsync(long rootID, int fromIdx, int count, CancellationToken cancellationToken = default(CancellationToken));

      Task<TItemSetResult> bsgGetSliceFromItemRAsync(long rootID, byte[] fromKey, int count, CancellationToken cancellationToken = default(CancellationToken));

      Task<TSplitBigSetResult> splitBigSetAsync(long rootID, long brotherRootID, long currentSize, CancellationToken cancellationToken = default(CancellationToken));

      Task<TItemSetResult> bsgRangeQueryAsync(long rootID, byte[] startKey, byte[] endKey, CancellationToken cancellationToken = default(CancellationToken));

      Task<bool> bsgBulkLoadAsync(long rootID, TItemSet setData, CancellationToken cancellationToken = default(CancellationToken));

      Task<TMultiPutItemResult> bsgMultiPutAsync(long rootID, TItemSet setData, bool getAddedItems, bool getReplacedItems, CancellationToken cancellationToken = default(CancellationToken));

      Task<TBigSetGenericData> getSetGenDataAsync(long metaID, CancellationToken cancellationToken = default(CancellationToken));

      Task putSetGenDataAsync(long metaID, TBigSetGenericData metadata, CancellationToken cancellationToken = default(CancellationToken));

      Task<long> getTotalCountAsync(long rootID, CancellationToken cancellationToken = default(CancellationToken));

      Task<long> removeAllAsync(long rootID, CancellationToken cancellationToken = default(CancellationToken));

    }


    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)      {
      }
      public async Task<TPutItemResult> bsgPutItemAsync(long rootID, TItem item, CancellationToken cancellationToken = default(CancellationToken))
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("bsgPutItem", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new bsgPutItemArgs();
        args.RootID = rootID;
        args.Item = item;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new bsgPutItemResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "bsgPutItem failed: unknown result");
      }

      public async Task<bool> bsgRemoveItemAsync(long key, byte[] itemKey, CancellationToken cancellationToken = default(CancellationToken))
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("bsgRemoveItem", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new bsgRemoveItemArgs();
        args.Key = key;
        args.ItemKey = itemKey;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new bsgRemoveItemResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "bsgRemoveItem failed: unknown result");
      }

      public async Task<TExistedResult> bsgExistedAsync(long rootID, byte[] itemKey, CancellationToken cancellationToken = default(CancellationToken))
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("bsgExisted", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new bsgExistedArgs();
        args.RootID = rootID;
        args.ItemKey = itemKey;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new bsgExistedResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "bsgExisted failed: unknown result");
      }

      public async Task<TItemResult> bsgGetItemAsync(long rootID, byte[] itemKey, CancellationToken cancellationToken = default(CancellationToken))
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("bsgGetItem", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new bsgGetItemArgs();
        args.RootID = rootID;
        args.ItemKey = itemKey;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new bsgGetItemResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "bsgGetItem failed: unknown result");
      }

      public async Task<TItemSetResult> bsgGetSliceAsync(long rootID, int fromIdx, int count, CancellationToken cancellationToken = default(CancellationToken))
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("bsgGetSlice", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new bsgGetSliceArgs();
        args.RootID = rootID;
        args.FromIdx = fromIdx;
        args.Count = count;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new bsgGetSliceResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "bsgGetSlice failed: unknown result");
      }

      public async Task<TItemSetResult> bsgGetSliceFromItemAsync(long rootID, byte[] fromKey, int count, CancellationToken cancellationToken = default(CancellationToken))
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("bsgGetSliceFromItem", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new bsgGetSliceFromItemArgs();
        args.RootID = rootID;
        args.FromKey = fromKey;
        args.Count = count;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new bsgGetSliceFromItemResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "bsgGetSliceFromItem failed: unknown result");
      }

      public async Task<TItemSetResult> bsgGetSliceRAsync(long rootID, int fromIdx, int count, CancellationToken cancellationToken = default(CancellationToken))
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("bsgGetSliceR", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new bsgGetSliceRArgs();
        args.RootID = rootID;
        args.FromIdx = fromIdx;
        args.Count = count;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new bsgGetSliceRResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "bsgGetSliceR failed: unknown result");
      }

      public async Task<TItemSetResult> bsgGetSliceFromItemRAsync(long rootID, byte[] fromKey, int count, CancellationToken cancellationToken = default(CancellationToken))
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("bsgGetSliceFromItemR", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new bsgGetSliceFromItemRArgs();
        args.RootID = rootID;
        args.FromKey = fromKey;
        args.Count = count;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new bsgGetSliceFromItemRResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "bsgGetSliceFromItemR failed: unknown result");
      }

      public async Task<TSplitBigSetResult> splitBigSetAsync(long rootID, long brotherRootID, long currentSize, CancellationToken cancellationToken = default(CancellationToken))
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("splitBigSet", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new splitBigSetArgs();
        args.RootID = rootID;
        args.BrotherRootID = brotherRootID;
        args.CurrentSize = currentSize;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new splitBigSetResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "splitBigSet failed: unknown result");
      }

      public async Task<TItemSetResult> bsgRangeQueryAsync(long rootID, byte[] startKey, byte[] endKey, CancellationToken cancellationToken = default(CancellationToken))
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("bsgRangeQuery", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new bsgRangeQueryArgs();
        args.RootID = rootID;
        args.StartKey = startKey;
        args.EndKey = endKey;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new bsgRangeQueryResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "bsgRangeQuery failed: unknown result");
      }

      public async Task<bool> bsgBulkLoadAsync(long rootID, TItemSet setData, CancellationToken cancellationToken = default(CancellationToken))
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("bsgBulkLoad", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new bsgBulkLoadArgs();
        args.RootID = rootID;
        args.SetData = setData;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new bsgBulkLoadResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "bsgBulkLoad failed: unknown result");
      }

      public async Task<TMultiPutItemResult> bsgMultiPutAsync(long rootID, TItemSet setData, bool getAddedItems, bool getReplacedItems, CancellationToken cancellationToken = default(CancellationToken))
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("bsgMultiPut", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new bsgMultiPutArgs();
        args.RootID = rootID;
        args.SetData = setData;
        args.GetAddedItems = getAddedItems;
        args.GetReplacedItems = getReplacedItems;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new bsgMultiPutResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "bsgMultiPut failed: unknown result");
      }

      public async Task<TBigSetGenericData> getSetGenDataAsync(long metaID, CancellationToken cancellationToken = default(CancellationToken))
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getSetGenData", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new getSetGenDataArgs();
        args.MetaID = metaID;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new getSetGenDataResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSetGenData failed: unknown result");
      }

      public async Task putSetGenDataAsync(long metaID, TBigSetGenericData metadata, CancellationToken cancellationToken = default(CancellationToken))
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("putSetGenData", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new putSetGenDataArgs();
        args.MetaID = metaID;
        args.Metadata = metadata;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new putSetGenDataResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        return;
      }

      public async Task<long> getTotalCountAsync(long rootID, CancellationToken cancellationToken = default(CancellationToken))
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getTotalCount", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new getTotalCountArgs();
        args.RootID = rootID;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new getTotalCountResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getTotalCount failed: unknown result");
      }

      public async Task<long> removeAllAsync(long rootID, CancellationToken cancellationToken = default(CancellationToken))
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("removeAll", TMessageType.Call, SeqId), cancellationToken);
        
        var args = new removeAllArgs();
        args.RootID = rootID;
        
        await args.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
        
        var msg = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (msg.Type == TMessageType.Exception)
        {
          var x = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw x;
        }

        var result = new removeAllResult();
        await result.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (result.__isset.success)
        {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "removeAll failed: unknown result");
      }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private IAsync _iAsync;

      public AsyncProcessor(IAsync iAsync)
      {
        if (iAsync == null) throw new ArgumentNullException(nameof(iAsync));

        _iAsync = iAsync;
        processMap_["bsgPutItem"] = bsgPutItem_ProcessAsync;
        processMap_["bsgRemoveItem"] = bsgRemoveItem_ProcessAsync;
        processMap_["bsgExisted"] = bsgExisted_ProcessAsync;
        processMap_["bsgGetItem"] = bsgGetItem_ProcessAsync;
        processMap_["bsgGetSlice"] = bsgGetSlice_ProcessAsync;
        processMap_["bsgGetSliceFromItem"] = bsgGetSliceFromItem_ProcessAsync;
        processMap_["bsgGetSliceR"] = bsgGetSliceR_ProcessAsync;
        processMap_["bsgGetSliceFromItemR"] = bsgGetSliceFromItemR_ProcessAsync;
        processMap_["splitBigSet"] = splitBigSet_ProcessAsync;
        processMap_["bsgRangeQuery"] = bsgRangeQuery_ProcessAsync;
        processMap_["bsgBulkLoad"] = bsgBulkLoad_ProcessAsync;
        processMap_["bsgMultiPut"] = bsgMultiPut_ProcessAsync;
        processMap_["getSetGenData"] = getSetGenData_ProcessAsync;
        processMap_["putSetGenData"] = putSetGenData_ProcessAsync;
        processMap_["getTotalCount"] = getTotalCount_ProcessAsync;
        processMap_["removeAll"] = removeAll_ProcessAsync;
      }

      protected delegate Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async Task bsgPutItem_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new bsgPutItemArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new bsgPutItemResult();
        try
        {
          result.Success = await _iAsync.bsgPutItemAsync(args.RootID, args.Item, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("bsgPutItem", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("bsgPutItem", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task bsgRemoveItem_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new bsgRemoveItemArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new bsgRemoveItemResult();
        try
        {
          result.Success = await _iAsync.bsgRemoveItemAsync(args.Key, args.ItemKey, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("bsgRemoveItem", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("bsgRemoveItem", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task bsgExisted_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new bsgExistedArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new bsgExistedResult();
        try
        {
          result.Success = await _iAsync.bsgExistedAsync(args.RootID, args.ItemKey, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("bsgExisted", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("bsgExisted", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task bsgGetItem_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new bsgGetItemArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new bsgGetItemResult();
        try
        {
          result.Success = await _iAsync.bsgGetItemAsync(args.RootID, args.ItemKey, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("bsgGetItem", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("bsgGetItem", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task bsgGetSlice_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new bsgGetSliceArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new bsgGetSliceResult();
        try
        {
          result.Success = await _iAsync.bsgGetSliceAsync(args.RootID, args.FromIdx, args.Count, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("bsgGetSlice", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("bsgGetSlice", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task bsgGetSliceFromItem_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new bsgGetSliceFromItemArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new bsgGetSliceFromItemResult();
        try
        {
          result.Success = await _iAsync.bsgGetSliceFromItemAsync(args.RootID, args.FromKey, args.Count, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("bsgGetSliceFromItem", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("bsgGetSliceFromItem", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task bsgGetSliceR_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new bsgGetSliceRArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new bsgGetSliceRResult();
        try
        {
          result.Success = await _iAsync.bsgGetSliceRAsync(args.RootID, args.FromIdx, args.Count, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("bsgGetSliceR", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("bsgGetSliceR", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task bsgGetSliceFromItemR_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new bsgGetSliceFromItemRArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new bsgGetSliceFromItemRResult();
        try
        {
          result.Success = await _iAsync.bsgGetSliceFromItemRAsync(args.RootID, args.FromKey, args.Count, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("bsgGetSliceFromItemR", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("bsgGetSliceFromItemR", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task splitBigSet_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new splitBigSetArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new splitBigSetResult();
        try
        {
          result.Success = await _iAsync.splitBigSetAsync(args.RootID, args.BrotherRootID, args.CurrentSize, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("splitBigSet", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("splitBigSet", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task bsgRangeQuery_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new bsgRangeQueryArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new bsgRangeQueryResult();
        try
        {
          result.Success = await _iAsync.bsgRangeQueryAsync(args.RootID, args.StartKey, args.EndKey, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("bsgRangeQuery", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("bsgRangeQuery", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task bsgBulkLoad_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new bsgBulkLoadArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new bsgBulkLoadResult();
        try
        {
          result.Success = await _iAsync.bsgBulkLoadAsync(args.RootID, args.SetData, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("bsgBulkLoad", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("bsgBulkLoad", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task bsgMultiPut_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new bsgMultiPutArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new bsgMultiPutResult();
        try
        {
          result.Success = await _iAsync.bsgMultiPutAsync(args.RootID, args.SetData, args.GetAddedItems, args.GetReplacedItems, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("bsgMultiPut", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("bsgMultiPut", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task getSetGenData_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new getSetGenDataArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new getSetGenDataResult();
        try
        {
          result.Success = await _iAsync.getSetGenDataAsync(args.MetaID, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("getSetGenData", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getSetGenData", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task putSetGenData_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new putSetGenDataArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new putSetGenDataResult();
        try
        {
          await _iAsync.putSetGenDataAsync(args.MetaID, args.Metadata, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("putSetGenData", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("putSetGenData", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task getTotalCount_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new getTotalCountArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new getTotalCountResult();
        try
        {
          result.Success = await _iAsync.getTotalCountAsync(args.RootID, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("getTotalCount", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getTotalCount", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async Task removeAll_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var args = new removeAllArgs();
        await args.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var result = new removeAllResult();
        try
        {
          result.Success = await _iAsync.removeAllAsync(args.RootID, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("removeAll", TMessageType.Reply, seqid), cancellationToken); 
          await result.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          var x = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("removeAll", TMessageType.Exception, seqid), cancellationToken);
          await x.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }


    public partial class bsgPutItemArgs : TBase
    {
      private long _rootID;
      private TItem _item;

      public long RootID
      {
        get
        {
          return _rootID;
        }
        set
        {
          __isset.rootID = true;
          this._rootID = value;
        }
      }

      public TItem Item
      {
        get
        {
          return _item;
        }
        set
        {
          __isset.item = true;
          this._item = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool rootID;
        public bool item;
      }

      public bsgPutItemArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64)
                {
                  RootID = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.Struct)
                {
                  Item = new TItem();
                  await Item.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("bsgPutItem_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.rootID)
          {
            field.Name = "rootID";
            field.Type = TType.I64;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI64Async(RootID, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (Item != null && __isset.item)
          {
            field.Name = "item";
            field.Type = TType.Struct;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Item.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as bsgPutItemArgs;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.rootID == other.__isset.rootID) && ((!__isset.rootID) || (System.Object.Equals(RootID, other.RootID))))
          && ((__isset.item == other.__isset.item) && ((!__isset.item) || (System.Object.Equals(Item, other.Item))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.rootID)
            hashcode = (hashcode * 397) + RootID.GetHashCode();
          if(__isset.item)
            hashcode = (hashcode * 397) + Item.GetHashCode();
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("bsgPutItem_args(");
        bool __first = true;
        if (__isset.rootID)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("RootID: ");
          sb.Append(RootID);
        }
        if (Item != null && __isset.item)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Item: ");
          sb.Append(Item== null ? "<null>" : Item.ToString());
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class bsgPutItemResult : TBase
    {
      private TPutItemResult _success;

      public TPutItemResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public bsgPutItemResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TPutItemResult();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("bsgPutItem_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as bsgPutItemResult;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.success)
            hashcode = (hashcode * 397) + Success.GetHashCode();
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("bsgPutItem_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class bsgRemoveItemArgs : TBase
    {
      private long _key;
      private byte[] _itemKey;

      public long Key
      {
        get
        {
          return _key;
        }
        set
        {
          __isset.key = true;
          this._key = value;
        }
      }

      public byte[] ItemKey
      {
        get
        {
          return _itemKey;
        }
        set
        {
          __isset.itemKey = true;
          this._itemKey = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool key;
        public bool itemKey;
      }

      public bsgRemoveItemArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64)
                {
                  Key = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  ItemKey = await iprot.ReadBinaryAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("bsgRemoveItem_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.key)
          {
            field.Name = "key";
            field.Type = TType.I64;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI64Async(Key, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (ItemKey != null && __isset.itemKey)
          {
            field.Name = "itemKey";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBinaryAsync(ItemKey, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as bsgRemoveItemArgs;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.key == other.__isset.key) && ((!__isset.key) || (System.Object.Equals(Key, other.Key))))
          && ((__isset.itemKey == other.__isset.itemKey) && ((!__isset.itemKey) || (System.Object.Equals(ItemKey, other.ItemKey))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.key)
            hashcode = (hashcode * 397) + Key.GetHashCode();
          if(__isset.itemKey)
            hashcode = (hashcode * 397) + ItemKey.GetHashCode();
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("bsgRemoveItem_args(");
        bool __first = true;
        if (__isset.key)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Key: ");
          sb.Append(Key);
        }
        if (ItemKey != null && __isset.itemKey)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ItemKey: ");
          sb.Append(ItemKey);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class bsgRemoveItemResult : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public bsgRemoveItemResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool)
                {
                  Success = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("bsgRemoveItem_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(Success, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as bsgRemoveItemResult;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.success)
            hashcode = (hashcode * 397) + Success.GetHashCode();
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("bsgRemoveItem_result(");
        bool __first = true;
        if (__isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class bsgExistedArgs : TBase
    {
      private long _rootID;
      private byte[] _itemKey;

      public long RootID
      {
        get
        {
          return _rootID;
        }
        set
        {
          __isset.rootID = true;
          this._rootID = value;
        }
      }

      public byte[] ItemKey
      {
        get
        {
          return _itemKey;
        }
        set
        {
          __isset.itemKey = true;
          this._itemKey = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool rootID;
        public bool itemKey;
      }

      public bsgExistedArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64)
                {
                  RootID = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  ItemKey = await iprot.ReadBinaryAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("bsgExisted_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.rootID)
          {
            field.Name = "rootID";
            field.Type = TType.I64;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI64Async(RootID, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (ItemKey != null && __isset.itemKey)
          {
            field.Name = "itemKey";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBinaryAsync(ItemKey, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as bsgExistedArgs;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.rootID == other.__isset.rootID) && ((!__isset.rootID) || (System.Object.Equals(RootID, other.RootID))))
          && ((__isset.itemKey == other.__isset.itemKey) && ((!__isset.itemKey) || (System.Object.Equals(ItemKey, other.ItemKey))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.rootID)
            hashcode = (hashcode * 397) + RootID.GetHashCode();
          if(__isset.itemKey)
            hashcode = (hashcode * 397) + ItemKey.GetHashCode();
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("bsgExisted_args(");
        bool __first = true;
        if (__isset.rootID)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("RootID: ");
          sb.Append(RootID);
        }
        if (ItemKey != null && __isset.itemKey)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ItemKey: ");
          sb.Append(ItemKey);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class bsgExistedResult : TBase
    {
      private TExistedResult _success;

      public TExistedResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public bsgExistedResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TExistedResult();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("bsgExisted_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as bsgExistedResult;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.success)
            hashcode = (hashcode * 397) + Success.GetHashCode();
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("bsgExisted_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class bsgGetItemArgs : TBase
    {
      private long _rootID;
      private byte[] _itemKey;

      public long RootID
      {
        get
        {
          return _rootID;
        }
        set
        {
          __isset.rootID = true;
          this._rootID = value;
        }
      }

      public byte[] ItemKey
      {
        get
        {
          return _itemKey;
        }
        set
        {
          __isset.itemKey = true;
          this._itemKey = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool rootID;
        public bool itemKey;
      }

      public bsgGetItemArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64)
                {
                  RootID = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  ItemKey = await iprot.ReadBinaryAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("bsgGetItem_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.rootID)
          {
            field.Name = "rootID";
            field.Type = TType.I64;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI64Async(RootID, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (ItemKey != null && __isset.itemKey)
          {
            field.Name = "itemKey";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBinaryAsync(ItemKey, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as bsgGetItemArgs;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.rootID == other.__isset.rootID) && ((!__isset.rootID) || (System.Object.Equals(RootID, other.RootID))))
          && ((__isset.itemKey == other.__isset.itemKey) && ((!__isset.itemKey) || (System.Object.Equals(ItemKey, other.ItemKey))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.rootID)
            hashcode = (hashcode * 397) + RootID.GetHashCode();
          if(__isset.itemKey)
            hashcode = (hashcode * 397) + ItemKey.GetHashCode();
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("bsgGetItem_args(");
        bool __first = true;
        if (__isset.rootID)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("RootID: ");
          sb.Append(RootID);
        }
        if (ItemKey != null && __isset.itemKey)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("ItemKey: ");
          sb.Append(ItemKey);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class bsgGetItemResult : TBase
    {
      private TItemResult _success;

      public TItemResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public bsgGetItemResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TItemResult();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("bsgGetItem_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as bsgGetItemResult;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.success)
            hashcode = (hashcode * 397) + Success.GetHashCode();
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("bsgGetItem_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class bsgGetSliceArgs : TBase
    {
      private long _rootID;
      private int _fromIdx;
      private int _count;

      public long RootID
      {
        get
        {
          return _rootID;
        }
        set
        {
          __isset.rootID = true;
          this._rootID = value;
        }
      }

      public int FromIdx
      {
        get
        {
          return _fromIdx;
        }
        set
        {
          __isset.fromIdx = true;
          this._fromIdx = value;
        }
      }

      public int Count
      {
        get
        {
          return _count;
        }
        set
        {
          __isset.count = true;
          this._count = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool rootID;
        public bool fromIdx;
        public bool count;
      }

      public bsgGetSliceArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64)
                {
                  RootID = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  FromIdx = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  Count = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("bsgGetSlice_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.rootID)
          {
            field.Name = "rootID";
            field.Type = TType.I64;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI64Async(RootID, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.fromIdx)
          {
            field.Name = "fromIdx";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(FromIdx, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.count)
          {
            field.Name = "count";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(Count, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as bsgGetSliceArgs;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.rootID == other.__isset.rootID) && ((!__isset.rootID) || (System.Object.Equals(RootID, other.RootID))))
          && ((__isset.fromIdx == other.__isset.fromIdx) && ((!__isset.fromIdx) || (System.Object.Equals(FromIdx, other.FromIdx))))
          && ((__isset.count == other.__isset.count) && ((!__isset.count) || (System.Object.Equals(Count, other.Count))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.rootID)
            hashcode = (hashcode * 397) + RootID.GetHashCode();
          if(__isset.fromIdx)
            hashcode = (hashcode * 397) + FromIdx.GetHashCode();
          if(__isset.count)
            hashcode = (hashcode * 397) + Count.GetHashCode();
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("bsgGetSlice_args(");
        bool __first = true;
        if (__isset.rootID)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("RootID: ");
          sb.Append(RootID);
        }
        if (__isset.fromIdx)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("FromIdx: ");
          sb.Append(FromIdx);
        }
        if (__isset.count)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Count: ");
          sb.Append(Count);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class bsgGetSliceResult : TBase
    {
      private TItemSetResult _success;

      public TItemSetResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public bsgGetSliceResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TItemSetResult();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("bsgGetSlice_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as bsgGetSliceResult;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.success)
            hashcode = (hashcode * 397) + Success.GetHashCode();
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("bsgGetSlice_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class bsgGetSliceFromItemArgs : TBase
    {
      private long _rootID;
      private byte[] _fromKey;
      private int _count;

      public long RootID
      {
        get
        {
          return _rootID;
        }
        set
        {
          __isset.rootID = true;
          this._rootID = value;
        }
      }

      public byte[] FromKey
      {
        get
        {
          return _fromKey;
        }
        set
        {
          __isset.fromKey = true;
          this._fromKey = value;
        }
      }

      public int Count
      {
        get
        {
          return _count;
        }
        set
        {
          __isset.count = true;
          this._count = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool rootID;
        public bool fromKey;
        public bool count;
      }

      public bsgGetSliceFromItemArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64)
                {
                  RootID = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  FromKey = await iprot.ReadBinaryAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  Count = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("bsgGetSliceFromItem_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.rootID)
          {
            field.Name = "rootID";
            field.Type = TType.I64;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI64Async(RootID, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (FromKey != null && __isset.fromKey)
          {
            field.Name = "fromKey";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBinaryAsync(FromKey, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.count)
          {
            field.Name = "count";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(Count, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as bsgGetSliceFromItemArgs;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.rootID == other.__isset.rootID) && ((!__isset.rootID) || (System.Object.Equals(RootID, other.RootID))))
          && ((__isset.fromKey == other.__isset.fromKey) && ((!__isset.fromKey) || (System.Object.Equals(FromKey, other.FromKey))))
          && ((__isset.count == other.__isset.count) && ((!__isset.count) || (System.Object.Equals(Count, other.Count))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.rootID)
            hashcode = (hashcode * 397) + RootID.GetHashCode();
          if(__isset.fromKey)
            hashcode = (hashcode * 397) + FromKey.GetHashCode();
          if(__isset.count)
            hashcode = (hashcode * 397) + Count.GetHashCode();
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("bsgGetSliceFromItem_args(");
        bool __first = true;
        if (__isset.rootID)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("RootID: ");
          sb.Append(RootID);
        }
        if (FromKey != null && __isset.fromKey)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("FromKey: ");
          sb.Append(FromKey);
        }
        if (__isset.count)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Count: ");
          sb.Append(Count);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class bsgGetSliceFromItemResult : TBase
    {
      private TItemSetResult _success;

      public TItemSetResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public bsgGetSliceFromItemResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TItemSetResult();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("bsgGetSliceFromItem_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as bsgGetSliceFromItemResult;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.success)
            hashcode = (hashcode * 397) + Success.GetHashCode();
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("bsgGetSliceFromItem_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class bsgGetSliceRArgs : TBase
    {
      private long _rootID;
      private int _fromIdx;
      private int _count;

      public long RootID
      {
        get
        {
          return _rootID;
        }
        set
        {
          __isset.rootID = true;
          this._rootID = value;
        }
      }

      public int FromIdx
      {
        get
        {
          return _fromIdx;
        }
        set
        {
          __isset.fromIdx = true;
          this._fromIdx = value;
        }
      }

      public int Count
      {
        get
        {
          return _count;
        }
        set
        {
          __isset.count = true;
          this._count = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool rootID;
        public bool fromIdx;
        public bool count;
      }

      public bsgGetSliceRArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64)
                {
                  RootID = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I32)
                {
                  FromIdx = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  Count = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("bsgGetSliceR_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.rootID)
          {
            field.Name = "rootID";
            field.Type = TType.I64;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI64Async(RootID, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.fromIdx)
          {
            field.Name = "fromIdx";
            field.Type = TType.I32;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(FromIdx, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.count)
          {
            field.Name = "count";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(Count, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as bsgGetSliceRArgs;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.rootID == other.__isset.rootID) && ((!__isset.rootID) || (System.Object.Equals(RootID, other.RootID))))
          && ((__isset.fromIdx == other.__isset.fromIdx) && ((!__isset.fromIdx) || (System.Object.Equals(FromIdx, other.FromIdx))))
          && ((__isset.count == other.__isset.count) && ((!__isset.count) || (System.Object.Equals(Count, other.Count))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.rootID)
            hashcode = (hashcode * 397) + RootID.GetHashCode();
          if(__isset.fromIdx)
            hashcode = (hashcode * 397) + FromIdx.GetHashCode();
          if(__isset.count)
            hashcode = (hashcode * 397) + Count.GetHashCode();
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("bsgGetSliceR_args(");
        bool __first = true;
        if (__isset.rootID)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("RootID: ");
          sb.Append(RootID);
        }
        if (__isset.fromIdx)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("FromIdx: ");
          sb.Append(FromIdx);
        }
        if (__isset.count)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Count: ");
          sb.Append(Count);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class bsgGetSliceRResult : TBase
    {
      private TItemSetResult _success;

      public TItemSetResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public bsgGetSliceRResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TItemSetResult();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("bsgGetSliceR_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as bsgGetSliceRResult;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.success)
            hashcode = (hashcode * 397) + Success.GetHashCode();
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("bsgGetSliceR_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class bsgGetSliceFromItemRArgs : TBase
    {
      private long _rootID;
      private byte[] _fromKey;
      private int _count;

      public long RootID
      {
        get
        {
          return _rootID;
        }
        set
        {
          __isset.rootID = true;
          this._rootID = value;
        }
      }

      public byte[] FromKey
      {
        get
        {
          return _fromKey;
        }
        set
        {
          __isset.fromKey = true;
          this._fromKey = value;
        }
      }

      public int Count
      {
        get
        {
          return _count;
        }
        set
        {
          __isset.count = true;
          this._count = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool rootID;
        public bool fromKey;
        public bool count;
      }

      public bsgGetSliceFromItemRArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64)
                {
                  RootID = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  FromKey = await iprot.ReadBinaryAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I32)
                {
                  Count = await iprot.ReadI32Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("bsgGetSliceFromItemR_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.rootID)
          {
            field.Name = "rootID";
            field.Type = TType.I64;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI64Async(RootID, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (FromKey != null && __isset.fromKey)
          {
            field.Name = "fromKey";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBinaryAsync(FromKey, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.count)
          {
            field.Name = "count";
            field.Type = TType.I32;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI32Async(Count, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as bsgGetSliceFromItemRArgs;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.rootID == other.__isset.rootID) && ((!__isset.rootID) || (System.Object.Equals(RootID, other.RootID))))
          && ((__isset.fromKey == other.__isset.fromKey) && ((!__isset.fromKey) || (System.Object.Equals(FromKey, other.FromKey))))
          && ((__isset.count == other.__isset.count) && ((!__isset.count) || (System.Object.Equals(Count, other.Count))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.rootID)
            hashcode = (hashcode * 397) + RootID.GetHashCode();
          if(__isset.fromKey)
            hashcode = (hashcode * 397) + FromKey.GetHashCode();
          if(__isset.count)
            hashcode = (hashcode * 397) + Count.GetHashCode();
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("bsgGetSliceFromItemR_args(");
        bool __first = true;
        if (__isset.rootID)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("RootID: ");
          sb.Append(RootID);
        }
        if (FromKey != null && __isset.fromKey)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("FromKey: ");
          sb.Append(FromKey);
        }
        if (__isset.count)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Count: ");
          sb.Append(Count);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class bsgGetSliceFromItemRResult : TBase
    {
      private TItemSetResult _success;

      public TItemSetResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public bsgGetSliceFromItemRResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TItemSetResult();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("bsgGetSliceFromItemR_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as bsgGetSliceFromItemRResult;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.success)
            hashcode = (hashcode * 397) + Success.GetHashCode();
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("bsgGetSliceFromItemR_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class splitBigSetArgs : TBase
    {
      private long _rootID;
      private long _brotherRootID;
      private long _currentSize;

      public long RootID
      {
        get
        {
          return _rootID;
        }
        set
        {
          __isset.rootID = true;
          this._rootID = value;
        }
      }

      public long BrotherRootID
      {
        get
        {
          return _brotherRootID;
        }
        set
        {
          __isset.brotherRootID = true;
          this._brotherRootID = value;
        }
      }

      public long CurrentSize
      {
        get
        {
          return _currentSize;
        }
        set
        {
          __isset.currentSize = true;
          this._currentSize = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool rootID;
        public bool brotherRootID;
        public bool currentSize;
      }

      public splitBigSetArgs()
      {
        this._brotherRootID = 0;
        this.__isset.brotherRootID = true;
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64)
                {
                  RootID = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.I64)
                {
                  BrotherRootID = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.I64)
                {
                  CurrentSize = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("splitBigSet_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.rootID)
          {
            field.Name = "rootID";
            field.Type = TType.I64;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI64Async(RootID, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.brotherRootID)
          {
            field.Name = "brotherRootID";
            field.Type = TType.I64;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI64Async(BrotherRootID, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.currentSize)
          {
            field.Name = "currentSize";
            field.Type = TType.I64;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI64Async(CurrentSize, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as splitBigSetArgs;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.rootID == other.__isset.rootID) && ((!__isset.rootID) || (System.Object.Equals(RootID, other.RootID))))
          && ((__isset.brotherRootID == other.__isset.brotherRootID) && ((!__isset.brotherRootID) || (System.Object.Equals(BrotherRootID, other.BrotherRootID))))
          && ((__isset.currentSize == other.__isset.currentSize) && ((!__isset.currentSize) || (System.Object.Equals(CurrentSize, other.CurrentSize))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.rootID)
            hashcode = (hashcode * 397) + RootID.GetHashCode();
          if(__isset.brotherRootID)
            hashcode = (hashcode * 397) + BrotherRootID.GetHashCode();
          if(__isset.currentSize)
            hashcode = (hashcode * 397) + CurrentSize.GetHashCode();
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("splitBigSet_args(");
        bool __first = true;
        if (__isset.rootID)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("RootID: ");
          sb.Append(RootID);
        }
        if (__isset.brotherRootID)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("BrotherRootID: ");
          sb.Append(BrotherRootID);
        }
        if (__isset.currentSize)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("CurrentSize: ");
          sb.Append(CurrentSize);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class splitBigSetResult : TBase
    {
      private TSplitBigSetResult _success;

      public TSplitBigSetResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public splitBigSetResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TSplitBigSetResult();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("splitBigSet_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as splitBigSetResult;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.success)
            hashcode = (hashcode * 397) + Success.GetHashCode();
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("splitBigSet_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class bsgRangeQueryArgs : TBase
    {
      private long _rootID;
      private byte[] _startKey;
      private byte[] _endKey;

      public long RootID
      {
        get
        {
          return _rootID;
        }
        set
        {
          __isset.rootID = true;
          this._rootID = value;
        }
      }

      public byte[] StartKey
      {
        get
        {
          return _startKey;
        }
        set
        {
          __isset.startKey = true;
          this._startKey = value;
        }
      }

      public byte[] EndKey
      {
        get
        {
          return _endKey;
        }
        set
        {
          __isset.endKey = true;
          this._endKey = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool rootID;
        public bool startKey;
        public bool endKey;
      }

      public bsgRangeQueryArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64)
                {
                  RootID = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.String)
                {
                  StartKey = await iprot.ReadBinaryAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.String)
                {
                  EndKey = await iprot.ReadBinaryAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("bsgRangeQuery_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.rootID)
          {
            field.Name = "rootID";
            field.Type = TType.I64;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI64Async(RootID, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (StartKey != null && __isset.startKey)
          {
            field.Name = "startKey";
            field.Type = TType.String;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBinaryAsync(StartKey, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (EndKey != null && __isset.endKey)
          {
            field.Name = "endKey";
            field.Type = TType.String;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBinaryAsync(EndKey, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as bsgRangeQueryArgs;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.rootID == other.__isset.rootID) && ((!__isset.rootID) || (System.Object.Equals(RootID, other.RootID))))
          && ((__isset.startKey == other.__isset.startKey) && ((!__isset.startKey) || (System.Object.Equals(StartKey, other.StartKey))))
          && ((__isset.endKey == other.__isset.endKey) && ((!__isset.endKey) || (System.Object.Equals(EndKey, other.EndKey))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.rootID)
            hashcode = (hashcode * 397) + RootID.GetHashCode();
          if(__isset.startKey)
            hashcode = (hashcode * 397) + StartKey.GetHashCode();
          if(__isset.endKey)
            hashcode = (hashcode * 397) + EndKey.GetHashCode();
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("bsgRangeQuery_args(");
        bool __first = true;
        if (__isset.rootID)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("RootID: ");
          sb.Append(RootID);
        }
        if (StartKey != null && __isset.startKey)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("StartKey: ");
          sb.Append(StartKey);
        }
        if (EndKey != null && __isset.endKey)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("EndKey: ");
          sb.Append(EndKey);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class bsgRangeQueryResult : TBase
    {
      private TItemSetResult _success;

      public TItemSetResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public bsgRangeQueryResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TItemSetResult();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("bsgRangeQuery_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as bsgRangeQueryResult;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.success)
            hashcode = (hashcode * 397) + Success.GetHashCode();
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("bsgRangeQuery_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class bsgBulkLoadArgs : TBase
    {
      private long _rootID;
      private TItemSet _setData;

      public long RootID
      {
        get
        {
          return _rootID;
        }
        set
        {
          __isset.rootID = true;
          this._rootID = value;
        }
      }

      public TItemSet SetData
      {
        get
        {
          return _setData;
        }
        set
        {
          __isset.setData = true;
          this._setData = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool rootID;
        public bool setData;
      }

      public bsgBulkLoadArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64)
                {
                  RootID = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.Struct)
                {
                  SetData = new TItemSet();
                  await SetData.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("bsgBulkLoad_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.rootID)
          {
            field.Name = "rootID";
            field.Type = TType.I64;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI64Async(RootID, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (SetData != null && __isset.setData)
          {
            field.Name = "setData";
            field.Type = TType.Struct;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SetData.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as bsgBulkLoadArgs;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.rootID == other.__isset.rootID) && ((!__isset.rootID) || (System.Object.Equals(RootID, other.RootID))))
          && ((__isset.setData == other.__isset.setData) && ((!__isset.setData) || (System.Object.Equals(SetData, other.SetData))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.rootID)
            hashcode = (hashcode * 397) + RootID.GetHashCode();
          if(__isset.setData)
            hashcode = (hashcode * 397) + SetData.GetHashCode();
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("bsgBulkLoad_args(");
        bool __first = true;
        if (__isset.rootID)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("RootID: ");
          sb.Append(RootID);
        }
        if (SetData != null && __isset.setData)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("SetData: ");
          sb.Append(SetData== null ? "<null>" : SetData.ToString());
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class bsgBulkLoadResult : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public bsgBulkLoadResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool)
                {
                  Success = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("bsgBulkLoad_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(Success, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as bsgBulkLoadResult;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.success)
            hashcode = (hashcode * 397) + Success.GetHashCode();
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("bsgBulkLoad_result(");
        bool __first = true;
        if (__isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class bsgMultiPutArgs : TBase
    {
      private long _rootID;
      private TItemSet _setData;
      private bool _getAddedItems;
      private bool _getReplacedItems;

      public long RootID
      {
        get
        {
          return _rootID;
        }
        set
        {
          __isset.rootID = true;
          this._rootID = value;
        }
      }

      public TItemSet SetData
      {
        get
        {
          return _setData;
        }
        set
        {
          __isset.setData = true;
          this._setData = value;
        }
      }

      public bool GetAddedItems
      {
        get
        {
          return _getAddedItems;
        }
        set
        {
          __isset.getAddedItems = true;
          this._getAddedItems = value;
        }
      }

      public bool GetReplacedItems
      {
        get
        {
          return _getReplacedItems;
        }
        set
        {
          __isset.getReplacedItems = true;
          this._getReplacedItems = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool rootID;
        public bool setData;
        public bool getAddedItems;
        public bool getReplacedItems;
      }

      public bsgMultiPutArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64)
                {
                  RootID = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.Struct)
                {
                  SetData = new TItemSet();
                  await SetData.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 3:
                if (field.Type == TType.Bool)
                {
                  GetAddedItems = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 4:
                if (field.Type == TType.Bool)
                {
                  GetReplacedItems = await iprot.ReadBoolAsync(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("bsgMultiPut_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.rootID)
          {
            field.Name = "rootID";
            field.Type = TType.I64;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI64Async(RootID, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (SetData != null && __isset.setData)
          {
            field.Name = "setData";
            field.Type = TType.Struct;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await SetData.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.getAddedItems)
          {
            field.Name = "getAddedItems";
            field.Type = TType.Bool;
            field.ID = 3;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(GetAddedItems, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (__isset.getReplacedItems)
          {
            field.Name = "getReplacedItems";
            field.Type = TType.Bool;
            field.ID = 4;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteBoolAsync(GetReplacedItems, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as bsgMultiPutArgs;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.rootID == other.__isset.rootID) && ((!__isset.rootID) || (System.Object.Equals(RootID, other.RootID))))
          && ((__isset.setData == other.__isset.setData) && ((!__isset.setData) || (System.Object.Equals(SetData, other.SetData))))
          && ((__isset.getAddedItems == other.__isset.getAddedItems) && ((!__isset.getAddedItems) || (System.Object.Equals(GetAddedItems, other.GetAddedItems))))
          && ((__isset.getReplacedItems == other.__isset.getReplacedItems) && ((!__isset.getReplacedItems) || (System.Object.Equals(GetReplacedItems, other.GetReplacedItems))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.rootID)
            hashcode = (hashcode * 397) + RootID.GetHashCode();
          if(__isset.setData)
            hashcode = (hashcode * 397) + SetData.GetHashCode();
          if(__isset.getAddedItems)
            hashcode = (hashcode * 397) + GetAddedItems.GetHashCode();
          if(__isset.getReplacedItems)
            hashcode = (hashcode * 397) + GetReplacedItems.GetHashCode();
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("bsgMultiPut_args(");
        bool __first = true;
        if (__isset.rootID)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("RootID: ");
          sb.Append(RootID);
        }
        if (SetData != null && __isset.setData)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("SetData: ");
          sb.Append(SetData== null ? "<null>" : SetData.ToString());
        }
        if (__isset.getAddedItems)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("GetAddedItems: ");
          sb.Append(GetAddedItems);
        }
        if (__isset.getReplacedItems)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("GetReplacedItems: ");
          sb.Append(GetReplacedItems);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class bsgMultiPutResult : TBase
    {
      private TMultiPutItemResult _success;

      public TMultiPutItemResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public bsgMultiPutResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TMultiPutItemResult();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("bsgMultiPut_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as bsgMultiPutResult;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.success)
            hashcode = (hashcode * 397) + Success.GetHashCode();
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("bsgMultiPut_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class getSetGenDataArgs : TBase
    {
      private long _metaID;

      public long MetaID
      {
        get
        {
          return _metaID;
        }
        set
        {
          __isset.metaID = true;
          this._metaID = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool metaID;
      }

      public getSetGenDataArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64)
                {
                  MetaID = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("getSetGenData_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.metaID)
          {
            field.Name = "metaID";
            field.Type = TType.I64;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI64Async(MetaID, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as getSetGenDataArgs;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.metaID == other.__isset.metaID) && ((!__isset.metaID) || (System.Object.Equals(MetaID, other.MetaID))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.metaID)
            hashcode = (hashcode * 397) + MetaID.GetHashCode();
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("getSetGenData_args(");
        bool __first = true;
        if (__isset.metaID)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("MetaID: ");
          sb.Append(MetaID);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class getSetGenDataResult : TBase
    {
      private TBigSetGenericData _success;

      public TBigSetGenericData Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public getSetGenDataResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct)
                {
                  Success = new TBigSetGenericData();
                  await Success.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("getSetGenData_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            if (Success != null)
            {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              await oprot.WriteFieldBeginAsync(field, cancellationToken);
              await Success.WriteAsync(oprot, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as getSetGenDataResult;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.success)
            hashcode = (hashcode * 397) + Success.GetHashCode();
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("getSetGenData_result(");
        bool __first = true;
        if (Success != null && __isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class putSetGenDataArgs : TBase
    {
      private long _metaID;
      private TBigSetGenericData _metadata;

      public long MetaID
      {
        get
        {
          return _metaID;
        }
        set
        {
          __isset.metaID = true;
          this._metaID = value;
        }
      }

      public TBigSetGenericData Metadata
      {
        get
        {
          return _metadata;
        }
        set
        {
          __isset.metadata = true;
          this._metadata = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool metaID;
        public bool metadata;
      }

      public putSetGenDataArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64)
                {
                  MetaID = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              case 2:
                if (field.Type == TType.Struct)
                {
                  Metadata = new TBigSetGenericData();
                  await Metadata.ReadAsync(iprot, cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("putSetGenData_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.metaID)
          {
            field.Name = "metaID";
            field.Type = TType.I64;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI64Async(MetaID, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          if (Metadata != null && __isset.metadata)
          {
            field.Name = "metadata";
            field.Type = TType.Struct;
            field.ID = 2;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await Metadata.WriteAsync(oprot, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as putSetGenDataArgs;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.metaID == other.__isset.metaID) && ((!__isset.metaID) || (System.Object.Equals(MetaID, other.MetaID))))
          && ((__isset.metadata == other.__isset.metadata) && ((!__isset.metadata) || (System.Object.Equals(Metadata, other.Metadata))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.metaID)
            hashcode = (hashcode * 397) + MetaID.GetHashCode();
          if(__isset.metadata)
            hashcode = (hashcode * 397) + Metadata.GetHashCode();
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("putSetGenData_args(");
        bool __first = true;
        if (__isset.metaID)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("MetaID: ");
          sb.Append(MetaID);
        }
        if (Metadata != null && __isset.metadata)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Metadata: ");
          sb.Append(Metadata== null ? "<null>" : Metadata.ToString());
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class putSetGenDataResult : TBase
    {

      public putSetGenDataResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("putSetGenData_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as putSetGenDataResult;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return true;
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("putSetGenData_result(");
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class getTotalCountArgs : TBase
    {
      private long _rootID;

      public long RootID
      {
        get
        {
          return _rootID;
        }
        set
        {
          __isset.rootID = true;
          this._rootID = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool rootID;
      }

      public getTotalCountArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64)
                {
                  RootID = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("getTotalCount_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.rootID)
          {
            field.Name = "rootID";
            field.Type = TType.I64;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI64Async(RootID, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as getTotalCountArgs;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.rootID == other.__isset.rootID) && ((!__isset.rootID) || (System.Object.Equals(RootID, other.RootID))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.rootID)
            hashcode = (hashcode * 397) + RootID.GetHashCode();
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("getTotalCount_args(");
        bool __first = true;
        if (__isset.rootID)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("RootID: ");
          sb.Append(RootID);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class getTotalCountResult : TBase
    {
      private long _success;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public getTotalCountResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I64)
                {
                  Success = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("getTotalCount_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            field.Name = "Success";
            field.Type = TType.I64;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI64Async(Success, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as getTotalCountResult;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.success)
            hashcode = (hashcode * 397) + Success.GetHashCode();
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("getTotalCount_result(");
        bool __first = true;
        if (__isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class removeAllArgs : TBase
    {
      private long _rootID;

      public long RootID
      {
        get
        {
          return _rootID;
        }
        set
        {
          __isset.rootID = true;
          this._rootID = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool rootID;
      }

      public removeAllArgs()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64)
                {
                  RootID = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("removeAll_args");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();
          if (__isset.rootID)
          {
            field.Name = "rootID";
            field.Type = TType.I64;
            field.ID = 1;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI64Async(RootID, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as removeAllArgs;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.rootID == other.__isset.rootID) && ((!__isset.rootID) || (System.Object.Equals(RootID, other.RootID))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.rootID)
            hashcode = (hashcode * 397) + RootID.GetHashCode();
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("removeAll_args(");
        bool __first = true;
        if (__isset.rootID)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("RootID: ");
          sb.Append(RootID);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }


    public partial class removeAllResult : TBase
    {
      private long _success;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      public struct Isset
      {
        public bool success;
      }

      public removeAllResult()
      {
      }

      public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          await iprot.ReadStructBeginAsync(cancellationToken);
          while (true)
          {
            field = await iprot.ReadFieldBeginAsync(cancellationToken);
            if (field.Type == TType.Stop)
            {
              break;
            }

            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I64)
                {
                  Success = await iprot.ReadI64Async(cancellationToken);
                }
                else
                {
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                }
                break;
              default: 
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                break;
            }

            await iprot.ReadFieldEndAsync(cancellationToken);
          }

          await iprot.ReadStructEndAsync(cancellationToken);
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
      {
        oprot.IncrementRecursionDepth();
        try
        {
          var struc = new TStruct("removeAll_result");
          await oprot.WriteStructBeginAsync(struc, cancellationToken);
          var field = new TField();

          if(this.__isset.success)
          {
            field.Name = "Success";
            field.Type = TType.I64;
            field.ID = 0;
            await oprot.WriteFieldBeginAsync(field, cancellationToken);
            await oprot.WriteI64Async(Success, cancellationToken);
            await oprot.WriteFieldEndAsync(cancellationToken);
          }
          await oprot.WriteFieldStopAsync(cancellationToken);
          await oprot.WriteStructEndAsync(cancellationToken);
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override bool Equals(object that)
      {
        var other = that as removeAllResult;
        if (other == null) return false;
        if (ReferenceEquals(this, other)) return true;
        return ((__isset.success == other.__isset.success) && ((!__isset.success) || (System.Object.Equals(Success, other.Success))));
      }

      public override int GetHashCode() {
        int hashcode = 157;
        unchecked {
          if(__isset.success)
            hashcode = (hashcode * 397) + Success.GetHashCode();
        }
        return hashcode;
      }

      public override string ToString()
      {
        var sb = new StringBuilder("removeAll_result(");
        bool __first = true;
        if (__isset.success)
        {
          if(!__first) { sb.Append(", "); }
          __first = false;
          sb.Append("Success: ");
          sb.Append(Success);
        }
        sb.Append(")");
        return sb.ToString();
      }
    }

  }
}
