/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


namespace org.openstars.core.bigset.Generic
{

  public partial class TCaSItem : TBase
  {
    private byte[] _itemKey;
    private byte[] _oldValue;
    private byte[] _newValue;

    public byte[] ItemKey
    {
      get
      {
        return _itemKey;
      }
      set
      {
        __isset.itemKey = true;
        this._itemKey = value;
      }
    }

    public byte[] OldValue
    {
      get
      {
        return _oldValue;
      }
      set
      {
        __isset.oldValue = true;
        this._oldValue = value;
      }
    }

    public byte[] NewValue
    {
      get
      {
        return _newValue;
      }
      set
      {
        __isset.newValue = true;
        this._newValue = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool itemKey;
      public bool oldValue;
      public bool newValue;
    }

    public TCaSItem()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                ItemKey = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.String)
              {
                OldValue = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                NewValue = await iprot.ReadBinaryAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("TCaSItem");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (ItemKey != null && __isset.itemKey)
        {
          field.Name = "itemKey";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(ItemKey, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (OldValue != null && __isset.oldValue)
        {
          field.Name = "oldValue";
          field.Type = TType.String;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(OldValue, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (NewValue != null && __isset.newValue)
        {
          field.Name = "newValue";
          field.Type = TType.String;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteBinaryAsync(NewValue, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as TCaSItem;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.itemKey == other.__isset.itemKey) && ((!__isset.itemKey) || (System.Object.Equals(ItemKey, other.ItemKey))))
        && ((__isset.oldValue == other.__isset.oldValue) && ((!__isset.oldValue) || (System.Object.Equals(OldValue, other.OldValue))))
        && ((__isset.newValue == other.__isset.newValue) && ((!__isset.newValue) || (System.Object.Equals(NewValue, other.NewValue))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.itemKey)
          hashcode = (hashcode * 397) + ItemKey.GetHashCode();
        if(__isset.oldValue)
          hashcode = (hashcode * 397) + OldValue.GetHashCode();
        if(__isset.newValue)
          hashcode = (hashcode * 397) + NewValue.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("TCaSItem(");
      bool __first = true;
      if (ItemKey != null && __isset.itemKey)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("ItemKey: ");
        sb.Append(ItemKey);
      }
      if (OldValue != null && __isset.oldValue)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("OldValue: ");
        sb.Append(OldValue);
      }
      if (NewValue != null && __isset.newValue)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("NewValue: ");
        sb.Append(NewValue);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
