/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


namespace org.openstars.core.bigset.Generic
{

  public partial class TItemResult : TBase
  {
    private TErrorCode _error;
    private TItem _item;

    /// <summary>
    /// 
    /// <seealso cref="TErrorCode"/>
    /// </summary>
    public TErrorCode Error
    {
      get
      {
        return _error;
      }
      set
      {
        __isset.error = true;
        this._error = value;
      }
    }

    public TItem Item
    {
      get
      {
        return _item;
      }
      set
      {
        __isset.item = true;
        this._item = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool error;
      public bool item;
    }

    public TItemResult()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32)
              {
                Error = (TErrorCode)await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Struct)
              {
                Item = new TItem();
                await Item.ReadAsync(iprot, cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("TItemResult");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (__isset.error)
        {
          field.Name = "error";
          field.Type = TType.I32;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async((int)Error, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (Item != null && __isset.item)
        {
          field.Name = "item";
          field.Type = TType.Struct;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await Item.WriteAsync(oprot, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as TItemResult;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.error == other.__isset.error) && ((!__isset.error) || (System.Object.Equals(Error, other.Error))))
        && ((__isset.item == other.__isset.item) && ((!__isset.item) || (System.Object.Equals(Item, other.Item))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.error)
          hashcode = (hashcode * 397) + Error.GetHashCode();
        if(__isset.item)
          hashcode = (hashcode * 397) + Item.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("TItemResult(");
      bool __first = true;
      if (__isset.error)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Error: ");
        sb.Append(Error);
      }
      if (Item != null && __isset.item)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Item: ");
        sb.Append(Item== null ? "<null>" : Item.ToString());
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
