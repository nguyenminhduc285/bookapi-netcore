/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


namespace org.openstars.core.bigset.Generic
{

  public partial class TGetSliceInfo : TBase
  {
    private List<long> _smallSetIDs;
    private int _firstIdxFrom;

    public List<long> SmallSetIDs
    {
      get
      {
        return _smallSetIDs;
      }
      set
      {
        __isset.smallSetIDs = true;
        this._smallSetIDs = value;
      }
    }

    public int FirstIdxFrom
    {
      get
      {
        return _firstIdxFrom;
      }
      set
      {
        __isset.firstIdxFrom = true;
        this._firstIdxFrom = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool smallSetIDs;
      public bool firstIdxFrom;
    }

    public TGetSliceInfo()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List)
              {
                {
                  TList _list16 = await iprot.ReadListBeginAsync(cancellationToken);
                  SmallSetIDs = new List<long>(_list16.Count);
                  for(int _i17 = 0; _i17 < _list16.Count; ++_i17)
                  {
                    long _elem18;
                    _elem18 = await iprot.ReadI64Async(cancellationToken);
                    SmallSetIDs.Add(_elem18);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I32)
              {
                FirstIdxFrom = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("TGetSliceInfo");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (SmallSetIDs != null && __isset.smallSetIDs)
        {
          field.Name = "smallSetIDs";
          field.Type = TType.List;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.I64, SmallSetIDs.Count), cancellationToken);
            foreach (long _iter19 in SmallSetIDs)
            {
              await oprot.WriteI64Async(_iter19, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.firstIdxFrom)
        {
          field.Name = "firstIdxFrom";
          field.Type = TType.I32;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI32Async(FirstIdxFrom, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as TGetSliceInfo;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.smallSetIDs == other.__isset.smallSetIDs) && ((!__isset.smallSetIDs) || (TCollections.Equals(SmallSetIDs, other.SmallSetIDs))))
        && ((__isset.firstIdxFrom == other.__isset.firstIdxFrom) && ((!__isset.firstIdxFrom) || (System.Object.Equals(FirstIdxFrom, other.FirstIdxFrom))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.smallSetIDs)
          hashcode = (hashcode * 397) + TCollections.GetHashCode(SmallSetIDs);
        if(__isset.firstIdxFrom)
          hashcode = (hashcode * 397) + FirstIdxFrom.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("TGetSliceInfo(");
      bool __first = true;
      if (SmallSetIDs != null && __isset.smallSetIDs)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("SmallSetIDs: ");
        sb.Append(SmallSetIDs);
      }
      if (__isset.firstIdxFrom)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("FirstIdxFrom: ");
        sb.Append(FirstIdxFrom);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
