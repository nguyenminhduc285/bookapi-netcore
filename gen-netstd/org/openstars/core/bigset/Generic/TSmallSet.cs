/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


namespace org.openstars.core.bigset.Generic
{

  public partial class TSmallSet : TBase
  {
    private List<TItem> _entries;
    private long _prev;
    private long _nxt;

    public List<TItem> Entries
    {
      get
      {
        return _entries;
      }
      set
      {
        __isset.entries = true;
        this._entries = value;
      }
    }

    public long Prev
    {
      get
      {
        return _prev;
      }
      set
      {
        __isset.prev = true;
        this._prev = value;
      }
    }

    public long Nxt
    {
      get
      {
        return _nxt;
      }
      set
      {
        __isset.nxt = true;
        this._nxt = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool entries;
      public bool prev;
      public bool nxt;
    }

    public TSmallSet()
    {
    }

    public async Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List)
              {
                {
                  TList _list0 = await iprot.ReadListBeginAsync(cancellationToken);
                  Entries = new List<TItem>(_list0.Count);
                  for(int _i1 = 0; _i1 < _list0.Count; ++_i1)
                  {
                    TItem _elem2;
                    _elem2 = new TItem();
                    await _elem2.ReadAsync(iprot, cancellationToken);
                    Entries.Add(_elem2);
                  }
                  await iprot.ReadListEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I64)
              {
                Prev = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.I64)
              {
                Nxt = await iprot.ReadI64Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("TSmallSet");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if (Entries != null && __isset.entries)
        {
          field.Name = "entries";
          field.Type = TType.List;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteListBeginAsync(new TList(TType.Struct, Entries.Count), cancellationToken);
            foreach (TItem _iter3 in Entries)
            {
              await _iter3.WriteAsync(oprot, cancellationToken);
            }
            await oprot.WriteListEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.prev)
        {
          field.Name = "prev";
          field.Type = TType.I64;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI64Async(Prev, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if (__isset.nxt)
        {
          field.Name = "nxt";
          field.Type = TType.I64;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteI64Async(Nxt, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      var other = that as TSmallSet;
      if (other == null) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.entries == other.__isset.entries) && ((!__isset.entries) || (System.Object.Equals(Entries, other.Entries))))
        && ((__isset.prev == other.__isset.prev) && ((!__isset.prev) || (System.Object.Equals(Prev, other.Prev))))
        && ((__isset.nxt == other.__isset.nxt) && ((!__isset.nxt) || (System.Object.Equals(Nxt, other.Nxt))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if(__isset.entries)
          hashcode = (hashcode * 397) + Entries.GetHashCode();
        if(__isset.prev)
          hashcode = (hashcode * 397) + Prev.GetHashCode();
        if(__isset.nxt)
          hashcode = (hashcode * 397) + Nxt.GetHashCode();
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("TSmallSet(");
      bool __first = true;
      if (Entries != null && __isset.entries)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Entries: ");
        sb.Append(Entries);
      }
      if (__isset.prev)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Prev: ");
        sb.Append(Prev);
      }
      if (__isset.nxt)
      {
        if(!__first) { sb.Append(", "); }
        __first = false;
        sb.Append("Nxt: ");
        sb.Append(Nxt);
      }
      sb.Append(")");
      return sb.ToString();
    }
  }

}
